const parse = require('@babel/parser');// 解析source为AST
const traverse = require('babel-traverse').default;// 遍历AST
const template = require('@babel/template');// 将普通的字符串转化为AST，提供更便捷的使用
const t = require('babel-types'); // 提供AST树节点的类型（215种）
const core = require('@babel/core');// Babel 的核心库，提供了将代码编译转化的能力。
var DISABLE_COMMENT = 'disable-try-catch';
const fs = require('fs');
const path = require('path');
const { getOptions } = require('loader-utils');
const info = getOptions(this).errInfo || 'ErrorInfo:';
const len = getOptions(this).len || 0;

const astPath = path.resolve(process.cwd(), './ast.json');

const genTryCatch = (path) => {
    try {
        let node = path.node,
            params = node.params,
            blockStatement = node.body,
            isGenerator = node.generator,
            isAsync = node.async;
        if(blockStatement.body && t.isTryStatement(blockStatement.body[0])
            || !t.isBlockStatement(blockStatement) && !t.isExpressionStatement(blockStatement)
            || blockStatement.body && blockStatement.body.length <= len
        ) {
            return;
        }

        let catchStatement = template.statement(`console.log('${info}', error)`)();
        let catchClause = t.catchClause(
            t.identifier('error'),
            t.blockStatement(
                [catchStatement]
            )
        );
        let tryStatement = t.tryStatement(blockStatement, catchClause);

        let func = null;
        if(t.isClassMethod(node)) {
            func = t.classMethod(node.kind, node.key, params, t.blockStatement([tryStatement]), node.computed, node.static);
        } else if(t.isObjectMethod(node)) {
            func = t.objectMethod(node.kind, node.key, params, t.blockStatement([tryStatement]), node.computed);
        } else if(t.isFunctionExpression(node)){
            func = t.functionExpression(node.id, params, t.blockStatement([tryStatement]), isGenerator, isAsync);
        } else if(t.isFunctionDeclaration(node)) {
            func = t.functionDeclaration(node.id, params, t.blockStatement([tryStatement]), isGenerator, isAsync);
        }

        path.replaceWith(func);
    } catch (e) {
        throw e;
    }
}

module.exports = function (source) {
    // 1. 解析
    let ast = parse.parse(source, {
        sourceType: 'module',
        plugins: ["dynamicImport"]
    });

    fs.appendFileSync(astPath, JSON.stringify(ast, null, '\t'));

    // 2. 遍历
    traverse(ast, {
        Function(path) {
            genTryCatch(path);
        }
    });

    return core.transformFromAstSync(ast, null, {
        configFile: false
    }).code
};
